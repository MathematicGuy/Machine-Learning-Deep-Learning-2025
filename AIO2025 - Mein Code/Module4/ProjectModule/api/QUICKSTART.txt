"""
Heart Disease Prediction API - Quick Start Guide
================================================

This API provides endpoints for predicting heart disease using a multimodal
fusion model that combines patient numerical data with echocardiogram features.

SETUP
=====

1. Install dependencies:
   pip install -r requirements.txt

2. Ensure these files exist:
   - ../models/best_fusion_model.pth
   - ../models/num_scaler_fold_1.pkl
   - ../models/cnn_scaler_fold_1.pkl
   - ../data/echonet_features.npy (optional, for faster inference)

3. Start the server:

   Windows:
   --------
   start_api.bat

   Linux/Mac:
   ----------
   chmod +x start_api.sh
   ./start_api.sh

   Or directly:
   -----------
   python main.py

4. The API will be available at: http://localhost:8000


USAGE EXAMPLES
==============

1. Web Browser:
   - Open http://localhost:8000/docs for interactive documentation
   - Try the endpoints directly in the Swagger UI

2. cURL (Command Line):

   # Single prediction
   curl -X POST "http://localhost:8000/predict" \
     -H "Content-Type: application/json" \
     -d "{\"sample_index\": 2, \"video_index\": 0}"

   # Health check
   curl "http://localhost:8000/health"

3. Python:

   import requests

   # Single prediction
   response = requests.post(
       "http://localhost:8000/predict",
       json={"sample_index": 2, "video_index": 0}
   )
   result = response.json()
   print(f"Prediction: {result['prediction_label']}")
   print(f"Probability: {result['disease_probability']:.4f}")

   # Batch prediction
   batch_response = requests.post(
       "http://localhost:8000/predict/batch",
       json=[
           {"sample_index": 0, "video_index": 0},
           {"sample_index": 1, "video_index": 1},
           {"sample_index": 2, "video_index": 2}
       ]
   )
   results = batch_response.json()
   for r in results['results']:
       print(f"Sample {r['sample_index']}: {r['prediction_label']}")

4. JavaScript:

   fetch('http://localhost:8000/predict', {
     method: 'POST',
     headers: {'Content-Type': 'application/json'},
     body: JSON.stringify({
       sample_index: 2,
       video_index: 0
     })
   })
   .then(response => response.json())
   .then(data => {
     console.log('Prediction:', data.prediction_label);
     console.log('Probability:', data.disease_probability);
   });


API ENDPOINTS
=============

GET /
    Returns API information and available endpoints

GET /health
    Check API health status and model loading

POST /predict
    Make a single prediction

    Request Body:
    {
      "sample_index": 2,    // Patient sample index (>= 0)
      "video_index": 0      // Video index (>= 0)
    }

    Response:
    {
      "prediction": 1,
      "prediction_label": "Disease",
      "disease_probability": 0.8745,
      "confidence": 0.8745,
      "sample_index": 2,
      "video_index": 0,
      "ground_truth": 1,
      "numerical_features_shape": [1, 28],
      "cnn_features_shape": [1, 64],
      "device": "cuda"
    }

POST /predict/batch
    Make multiple predictions in one request

    Request Body: Array of prediction requests
    [
      {"sample_index": 0, "video_index": 0},
      {"sample_index": 1, "video_index": 1}
    ]

    Response:
    {
      "results": [...],
      "errors": [],
      "total_processed": 2,
      "total_errors": 0
    }


TESTING
=======

Run the test suite:
   python test_api.py

This will test:
- Root endpoint
- Health check
- Single prediction
- Batch prediction
- Error handling


TROUBLESHOOTING
===============

1. "Cannot connect to API":
   - Make sure the server is running (python main.py)
   - Check that port 8000 is not in use

2. "Model not loaded":
   - Verify model files exist in ../models/
   - Check file paths in load_model.py

3. "torch is not defined":
   - Install PyTorch: pip install torch torchvision
   - Ensure imports are present in all files

4. "Size mismatch" error:
   - Check numerical_dim in load_model.py matches training
   - Ensure model was trained with correct feature dimensions

5. "CUDA out of memory":
   - Set device to 'cpu' in load_model.py
   - Or reduce batch size in batch predictions

6. "Index out of range":
   - Verify sample_index < total patients in dataset
   - Verify video_index < total videos in EchoNet


CONFIGURATION
=============

Edit main.py to change:
- host: "0.0.0.0" (default, allows external connections)
- port: 8000 (default)
- reload: True (auto-reload on code changes during development)

Edit load_model.py to change:
- Model paths
- Device (cuda/cpu)
- Feature dimensions


API DOCUMENTATION
=================

Once the server is running, visit:
- Swagger UI: http://localhost:8000/docs
- ReDoc: http://localhost:8000/redoc


PRODUCTION DEPLOYMENT
=====================

For production, use:

   uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4

Or with Gunicorn:

   gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000


SECURITY NOTES
==============

- Add authentication if deploying publicly
- Use HTTPS in production
- Implement rate limiting for public APIs
- Validate and sanitize all inputs
- Set CORS policies appropriately


CONTACT & SUPPORT
=================

For issues or questions:
- Check README.md for detailed documentation
- Review code comments in source files
- Test with test_api.py to isolate issues
"""
